# -*- coding: utf-8 -*-
"""
Created on Wed Feb 25 16:46:01 2015

@author: chenj
@note: this script is to extract useful features for training random forest classifiers
on the Microsoft Malware problem
"""
import os
from csv import writer
import six

read_mode, write_mode = ('r','w') if six.PY2 else ('rt','wt')

path = os.path.dirname(os.path.realpath(__file__))
os.chdir(path)

if six.PY2:
    from itertools import izip
    zp = izip
else:
    zp = zip


#files = ['train.7z', 'test.7z']\
files = ['train1.zip', 'train2.zip']
featureFiles = [infile[:infile.find('.zip')] + '_feature.csv' for infile in files]
namefile = 'out.txt'

############################
##  function definitions  ##
############################

def GetFileList(namefile):
    ''' GetFileList extracts .bytes file names from namefile, where namefile is
    generated by '7za l' command line that lists all files compressed in a 7z
    format file.
    '''
    byteFiles = []
    
    with open(namefile, read_mode) as infile:
        for row in infile:
            texts = row.split()
            for text in texts:
                if '.byte' in text:
                    byteFiles.append(text)
    
    return(byteFiles)
            
            
            
 
def ExtractFeature(infile, outfile):
    ''' ExtractFeature extracts features from compressed train and test files
    
    INPUT: 
        input: compressed train/test files
        
    OUTPUT:
        output: features extracted from .bytes files, where each row contains
                features for a particular file
    '''
    os.system('7za l ' + infile + ' > ' + namefile)
    byteFiles = GetFileList(namefile)
        
    with open(outfile, write_mode) as f:
        # Preparing header part
        fw = writer(f)
        colnames = ['filename', 'num_que_mark']
        colnames += ['TB_'+hex(i)[2:] for i in range(16**2)]
        colnames += ['FB_'+hex(i)[2:] for i in range(16**4)]
        fw.writerow(colnames)
        
        # Creating row set
        consolidation = []
        for t, fname in enumerate(byteFiles):
            
            # extract one byte file from 7z
            os.system('7za e ' + infile + ' ' + fname)
            
            twoByte = [0]*16**2
            num_que_mark = 0
            with open(fname, read_mode) as fbyte:
                for row in fbyte:
                    row = row.rstrip()
                    codes = row[:-2].split()[1:]
                    # Finding number of times ?? appears
                    num_que_mark += codes.count('??')
                    
                    # Conversion of code to to two byte
                    twoByteCode = [int(i,16) for i in codes if i != '??']
                                                        
                    # Frequency calculation of two byte codes
                    for i in twoByteCode:
                        twoByte[i] += 1
                
            # Row added
            consolidation.append([fname[:fname.find('.bytes')], num_que_mark] \
                                    + twoByte)
                                    
            # Writing rows after every 100 files processed
            if (t+1) % 100 == 0:
                print(t+1, 'files loaded for ', path)
                fw.writerows(consolidation)
                consolidation = []
                
            # remove current byte file
            os.remove(fname)
                
        # Writing remaining files
        if len(consolidation)>0:
            fw.writerows(consolidation)
            consolidation = []
    
    del byteFiles, colnames, consolidation, f, fw, twoByte, twoByteCode

if __name__ == '__main__':  
    for (infile, outfile) in zip(files, featureFiles):
        ExtractFeature(infile, outfile)
        
